BROKER SCHEMA ace.bus.api.getRetrieve
PATH pe.ibk.common, pe.ibk.common.audit;

--SERVICE INPUT--
CREATE COMPUTE MODULE getRetrieveCICS_PrepareReq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		DECLARE refParametersIn REFERENCE TO InputLocalEnvironment.REST.Input.Parameters;
		DECLARE refBody REFERENCE TO InputRoot.JSON.Data;
		DECLARE refEnv REFERENCE TO Environment;
		DECLARE refEnvAuidt REFERENCE TO refEnv.Audit;
		DECLARE refOut REFERENCE TO OutputRoot;
		
		--Audit input data
		CALL getInputDataAudit(refEnv,InputLocalEnvironment,InputRoot);
		CALL setPropertiesMessage(refOut,getENCODING_HOST(),getCCSID_HOST());
		
		--Set service secuence
		SET refEnv.Srv.Secuence = '01';
		
		--Input request data JSON to DFDL;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'DFDL';
		DECLARE refBodyOut REFERENCE TO OutputRoot.DFDL;
		CALL prepareDataRequestCICS(refBodyOut,refEnv,refParametersIn,refBody);
		--
		CALL setConfigPropertiesCICS(OutputLocalEnvironment,refEnv);
		CALL setMonitoringRequestTime(refEnv);
		CALL getRequestDataAudit(refEnv,OutputRoot,OutputLocalEnvironment);
		
		--Propagate alternative MockLabel
		SET Environment.GROVER.DataCICS = CAST(ASBITSTREAM(OutputRoot.DFDL CCSID getCCSID_HOST() ENCODING getENCODING_HOST()) AS CHARACTER CCSID getCCSID_HOST() ENCODING getENCODING_HOST());
		PROPAGATE TO LABEL 'localFlow';
		RETURN FALSE;
	END;
END MODULE;

--SERVICE RESPONSE--
CREATE COMPUTE MODULE getRetrieveCICS_PrepareRes
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
	END;
END MODULE;

--SERVICE ERROR--
CREATE COMPUTE MODULE getRetrieveCICS_PrepareError
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
	END;
END MODULE;

--MOCK RESPONSE--
CREATE COMPUTE MODULE getRetrieveCICS_LocalMockRes
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
	END;
END MODULE;
 




